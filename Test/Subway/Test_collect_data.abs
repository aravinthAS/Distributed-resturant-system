module Test_Order;

import * from Config;

{
  //Declared database
  DB db_Orders = new Database("Orders"); // for Order(1, ->, sandwiches(-1, -499), Ingredient(<-, -500), SystemInfo(0)

  //Init database
  Data systemInfo = SystemInfo(0);
  db_Orders!updateData(0, systemInfo);

  Data s1 = Sandwich("Black Forest Ham", list[
  Pair(1, 3),
  Pair(5, 3),
  Pair(6, 3)], 2);
  Data s2 = Sandwich("Chicken & Bacon Ranch Melt", list[
  Pair(1, 3),
  Pair(5, 3),
  Pair(6, 3)], 3);
  Data s3 = Sandwich("Cold Cut Combo", list[
  Pair(2, 3),
  Pair(3, 3),
  Pair(4, 3)], 3);
  Data s4 = Sandwich("Italian B.M.R", list[
  Pair(1, 3),
  Pair(7, 3),
  Pair(2, 3)], 2);
  Data s5 = Sandwich("Meatball Marinara", list[
  Pair(1, 3),
  Pair(5, 3),
  Pair(6, 3),
  Pair(7, 2),
  Pair(9, 2)], 5);

  /* Sandwiches */
  db_Orders!updateData(-1, s1);
  db_Orders!updateData(-2, s2);
  db_Orders!updateData(-3, s3);
  db_Orders!updateData(-4, s4);
  db_Orders!updateData(-5, s5);

  /* INGREDIENTS */
  db_Orders!updateData(-500, Ingredient("Tomat"));
  db_Orders!updateData(-501, Ingredient("Agurk"));
  db_Orders!updateData(-502, Ingredient("SkiltAgurk"));
  db_Orders!updateData(-503, Ingredient("Roastbiff"));
  db_Orders!updateData(-504, Ingredient("Skinke"));
  db_Orders!updateData(-505, Ingredient("Gul-Ost"));
  db_Orders!updateData(-506, Ingredient("Norwega Ost"));
  db_Orders!updateData(-507, Ingredient("Majones"));
  db_Orders!updateData(-508, Ingredient("Smør"));
  db_Orders!updateData(-509, Ingredient("Fin baguette"));
  db_Orders!updateData(-510, Ingredient("Grov baguette"));
  db_Orders!updateData(-511, Ingredient("Paprika"));

  //Statistic purpose
  Stat stat = new Stat();

  //Queues
  Queue q1_RM = new Queue("Receptionist-Manager");
  Queue q2_MC = new Queue("Manager-Chef");
  Queue q3_CW = new Queue("Chef-Waiter");

  DelayQueue dq = new DelayQueue("Delay", q1_RM, db_Orders, stat);

  LoadBalancer lb = new RoundRobinLoadBalancer();
  lb!printSystem(q1_RM, q2_MC, q3_CW);

  Receptionist f1 = new Receptionist(db_Orders, q1_RM, lb, stat);
  Receptionist f2 = new Receptionist(db_Orders, q1_RM, lb, stat);
  Receptionist f3 = new Receptionist(db_Orders, q1_RM, lb, stat);
  Receptionist f4 = new Receptionist(db_Orders, q1_RM, lb, stat);
  Receptionist f5 = new Receptionist(db_Orders, q1_RM, lb, stat);

  lb.addReceptionist(f1);
  //lb.addReceptionist(f2);
  /*lb.addReceptionist(f3);
  lb.addReceptionist(f4);
  lb.addReceptionist(f5);
  */
  Manager sc = new Manager(q1_RM, q2_MC, db_Orders, dq, stat);
  //Manager sc2 = new Manager(q1_RM, q2_MC, db_Orders, dq, stat);
  //Manager sc3 = new Manager(q1_RM, q2_MC, db_Orders, dq, stat);
  //Manager sc4 = new Manager(q1_RM, q2_MC, db_Orders, dq, stat);

  Chef sca = new Chef(q2_MC, q3_CW, db_Orders);
  sca.initChef();
  Chef sca2 = new Chef(q2_MC, q3_CW, db_Orders);
  sca2.initChef();
  Chef sca3 = new Chef(q2_MC, q3_CW, db_Orders);
  sca3.initChef();
  Chef sca4 = new Chef(q2_MC, q3_CW, db_Orders);
  sca4.initChef();
  Chef sca5 = new Chef(q2_MC, q3_CW, db_Orders);
  sca5.initChef();
  //Chef sca6 = new Chef(q2_MC, q3_CW, db_Orders);
  //sca6.initChef();

  Waiter p = new Waiter(q3_CW, db_Orders, stat);
  //Waiter p2 = new Waiter(q3_CW, db_Orders, stat);
  //Waiter p3 = new Waiter(q3_CW, db_Orders, stat);

  /* CLIENTS */
  Client c1 = new Client(1, lb);
  Client c2 = new Client(2, lb);
  Client c3 = new Client(3, lb);
  Client c4 = new Client(4, lb);
  Client c5 = new Client(5, lb);
  Client c6 = new Client(6, lb);
  Client c7 = new Client(7, lb);
  Client c8 = new Client(8, lb);
  Client c9 = new Client(9, lb);
  Client c10 = new Client(10, lb);
  Client c11 = new Client(11, lb);
  Client c12 = new Client(12, lb);
  Client c13 = new Client(13, lb);
  Client c14 = new Client(14, lb);
  Client c15 = new Client(15, lb);
  Client c16 = new Client(16, lb);
  Client c17 = new Client(17, lb);
  Client c18 = new Client(18, lb);
  Client c19 = new Client(19, lb);
  Client c20 = new Client(20, lb);

  List<Sandwich_ID> l1 = list[-4, -2, -3];
  List<Sandwich_ID> l2 = list[-1];
  List<Sandwich_ID> l3 = list[-2, -3];
  List<Sandwich_ID> l4 = list[-4];
  List<Sandwich_ID> l5 = list[-1, -2];
  List<Sandwich_ID> l6 = list[-4, -1];
  List<Sandwich_ID> l7 = list[-4, -3];
  List<Sandwich_ID> l8 = list[-3, -3];
  List<Sandwich_ID> l9 = list[-2, -3, -2];
  List<Sandwich_ID> l10 = list[-1, -5];


  c1!sendOrder(l1, 3, 100, 50);
  c2!sendOrder(l2, 1, 140, 80);
  c3!sendOrder(l3, 5, 130, 60);
  c3!sendOrder(l4, 3, 50, 70);
  c3!sendOrder(l5, 2, 40, 40);
  c3!sendOrder(l6, 3, 70, 30);
  c3!sendOrder(l7, 5, 60, 100);
  c3!sendOrder(l8, 6, 70, 60);
  c3!sendOrder(l9, 3, 50, 80);
  c3!sendOrder(l10, 5, 60, 60);
  c3!sendOrder(l1, 7, 50, 60);
  c3!sendOrder(l2, 3, 30, 70);
  c3!sendOrder(l3, 4, 70, 40);
  c3!sendOrder(l4, 5, 40, 70);
  c3!sendOrder(l5, 6, 30, 50);
  c3!sendOrder(l6, 3, 50, 120);
  c3!sendOrder(l7, 7, 70, 40);
  c3!sendOrder(l8, 3, 30, 63);
  c3!sendOrder(l9, 6, 80, 67);
  c3!sendOrder(l10, 7, 30, 64);

  //c7!sendOrder(l12, 1, 5, 40);
  //c2!sendOrder(ltest, 1, 20, 140);
  /*
  c1!sendCommand("LA MEG OGSÅ SENDE", 4, 20);
  c2!sendCommand("DJKJD", 5, 10);
  c2!sendCommand("jfkdls", 1, 2);
  c2!sendCommand("Dette er test", 7, 10);
  c1!sendCommand("LA MEG OGSÅ SENDE", 4, 20);
  c2!sendCommand("DJKJD", 5, 0);
  c2!sendCommand("jfkdls", 1, 0);
  c2!sendCommand("Dette er test", 7, 0);
  c1!sendCommand("LA MEG OGSÅ SENDE", 4, 0);
  c2!sendCommand("DJKJD", 5, 1);
  c2!sendCommand("jfkdls", 1, 2);
  */
  //c2!sendCommand("Se om Klienten kan sende en kommand til, mens han venter på svar", 3, 10);
  await duration(1000, 1000);
  println("*********STATISTIC*************");
  Int stat1 = stat.get_success_delivery();
  Int stat2 = stat.get_failed_delivery();
  Int stat3 = stat.get_changed_endtime();
  Int stat4 = stat.get_unchanged_endtime();
  Int stat5 = stat.get_total_order();
  println("Success delivery: "+ toString(stat1));
  println("Failed delivery: " + toString(stat2));
  println("Changed endtime: " + toString(stat3));
  println("Unchanged endtime: " + toString(stat4));
  println("Total order(s): " + toString(stat5));
  println("*********FINISHED**************");
}
