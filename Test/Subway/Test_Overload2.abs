module Test_Order_temp;

import * from Config;

{
  //Declared database
  DB db_Orders = new Database("Orders"); // for Order(1, ->, sandwiches(-1, -499), Ingredient(<-, -500), SystemInfo(0)

  //Init database
  Data systemInfo = SystemInfo(0);
  db_Orders!updateData(0, systemInfo);

  Data s1 = Sandwich("Black Forest Ham", list[
  Pair(1, 3),
  Pair(5, 3),
  Pair(6, 3)], 4);
  Data s2 = Sandwich("Chicken & Bacon Ranch Melt", list[
  Pair(1, 3),
  Pair(5, 3),
  Pair(6, 3)], 4);
  Data s3 = Sandwich("Cold Cut Combo", list[
  Pair(2, 3),
  Pair(3, 3),
  Pair(4, 3)], 3);
  Data s4 = Sandwich("Italian B.M.R", list[
  Pair(1, 3),
  Pair(7, 3),
  Pair(2, 3)], 2);
  Data s5 = Sandwich("Meatball Marinara", list[
  Pair(1, 3),
  Pair(5, 3),
  Pair(6, 3),
  Pair(7, 2),
  Pair(9, 2)], 7);

  /* Sandwiches */
  db_Orders!updateData(-1, s1);
  db_Orders!updateData(-2, s2);
  db_Orders!updateData(-3, s3);
  db_Orders!updateData(-4, s4);
  db_Orders!updateData(-5, s5);

  /* INGREDIENTS */
  db_Orders!updateData(-500, Ingredient("Tomat"));
  db_Orders!updateData(-501, Ingredient("Agurk"));
  db_Orders!updateData(-502, Ingredient("SkiltAgurk"));
  db_Orders!updateData(-503, Ingredient("Roastbiff"));
  db_Orders!updateData(-504, Ingredient("Skinke"));
  db_Orders!updateData(-505, Ingredient("Gul-Ost"));
  db_Orders!updateData(-506, Ingredient("Norwega Ost"));
  db_Orders!updateData(-507, Ingredient("Majones"));
  db_Orders!updateData(-508, Ingredient("SmÃ¸r"));
  db_Orders!updateData(-509, Ingredient("Fin baguette"));
  db_Orders!updateData(-510, Ingredient("Grov baguette"));
  db_Orders!updateData(-511, Ingredient("Paprika"));

  //Statistic purpose
  Stat stat = new Stat();

  //Queues
  Queue q1_RM = new Queue("Receptionist-Manager");
  Queue q2_MC = new Queue("Manager-Chef");
  Queue q3_CW = new Queue("Chef-Waiter");

  DelayQueue dq = new DelayQueue("Delay", q1_RM, db_Orders, stat);

  LoadBalancer lb = new RoundRobinLoadBalancer();
  lb!printSystem(q1_RM, q2_MC, q3_CW);

  Receptionist f1 = new Receptionist(db_Orders, q1_RM, lb, stat);
  lb.addReceptionist(f1);

  Manager sc = new Manager(q1_RM, q2_MC, db_Orders, dq);
  Manager sc2 = new Manager(q1_RM, q2_MC, db_Orders, dq);
  Manager sc3 = new Manager(q1_RM, q2_MC, db_Orders, dq);
  Manager sc4 = new Manager(q1_RM, q2_MC, db_Orders, dq);

  Chef sca = new Chef(q2_MC, q3_CW, db_Orders);
  sca.initChef();
  Chef sca2 = new Chef(q2_MC, q3_CW, db_Orders);
  sca2.initChef();
  Chef sca3 = new Chef(q2_MC, q3_CW, db_Orders);
  sca3.initChef();
  Chef sca4 = new Chef(q2_MC, q3_CW, db_Orders);
  sca4.initChef();

  Waiter p = new Waiter(q3_CW, db_Orders, stat);
  Waiter p2 = new Waiter(q3_CW, db_Orders, stat);
  //Waiter p3 = new Waiter(q3_CW, db_Orders, stat);

  /* CLIENTS */
  Client c1 = new Client(1, lb);
  Client c2 = new Client(2, lb);
  Client c3 = new Client(3, lb);
  Client c4 = new Client(4, lb);
  Client c5 = new Client(5, lb);
  Client c6 = new Client(6, lb);
  Client c7 = new Client(7, lb);
  Client c8 = new Client(8, lb);
  /* COMPLETED ORDER LIST of SANDWICH(ES) */
  List<Sandwich_ID> l1 = list[-4, -2, -3];
  List<Sandwich_ID> ltest = list[-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2];

  stat.set_start_time(now());
  Int number_of_orders = 300;
  while(number_of_orders != 0){
    c1!sendOrder(l1, 1, 10, 50);
    number_of_orders = number_of_orders - 1;
  }

  Int inUse = await lb!getNbrInuseW();
  while(inUse != 0){
    inUse = await lb!getNbrInuseW();
    println("Still Working");
  }

/*  Int time_break = 1;
  while(time_break == 1){
    if(timeValue(now()) == 1499){ time_break = 0;}
    println("Time"+ toString(timeValue(now())) + ":");
    await duration(1, 1);
  }*/
//  stat.set_end_time(now());
  /*
  c2!sendOrder(l1, 2, 10, 40);
  c4!sendOrder(l4, 3, 10, 40);
  c7!sendOrder(l12, 1, 5, 40);
  c2!sendOrder(ltest, 1, 20, 100);
  */

  await duration(1500, 1500);
  println("*********STATISTIC*************");
  Int stat1 = stat.get_success_delivery();
  Int stat2 = stat.get_failed_delivery();
  Int stat3 = stat.get_changed_endtime();
  Int stat4 = stat.get_unchanged_endtime();
  Int stat5 = stat.get_total_order();
  Rat total_time_used_on_loadBalancer = stat.get_total_time_used();
  println("Success delivery: "+ toString(stat1));
  println("Failed delivery: " + toString(stat2));
  println("Changed endtime: " + toString(stat3));
  println("Unchanged endtime: " + toString(stat4));
  println("Total Orders: " + toString(stat5));
  println("Total time used at LoadBalancer: " + toString(total_time_used_on_loadBalancer));
  println("*********FINISHED**************");
}
